---
title: "Grammar of Graphics"
subtitle: "Fondamenti di ggplot2"
author: "Marco Chiapello"
format: 
  revealjs:
    theme: simple
    transition: slide
    slide-number: true
    chalkboard: true
    logo: images/ggplot2_logo.jpg
    footer: "REVELO Training - Data Viz 2025"
    css: presentation-style.css
    title-slide-attributes:
      data-background-image: images/frequency-wave-7776034_1280.jpg
      data-background-size: cover
      data-background-opacity: "0.1"
resources:
  - images/
  - presentation-style.css
---

## Perch√© Visualizzare? Il Datasaurus Dozen {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

::: {style="font-size: 0.65em;"}
**Le statistiche riassuntive non bastano!**

::: {.columns}
::: {.column width="50%"}
**13 dataset con IDENTICHE statistiche:**

- Media X: ~54.26
- Media Y: ~47.83
- Deviazione Standard X: ~16.76
- Deviazione Standard Y: ~26.93
- Correlazione: ~-0.06

**Senza visualizzare**, sembrano lo stesso dataset!

**Con la visualizzazione**, la verit√† emerge...
:::

::: {.column width="50%"}
```r
# Install & carica
install.packages("datasauRus")
library(datasauRus)

# Esplora i dati
head(datasaurus_dozen)

# Verifica statistiche identiche
library(dplyr)
datasaurus_dozen %>% 
  group_by(dataset) %>% 
  summarise(
    mean_x = mean(x),
    mean_y = mean(y),
    cor_xy = cor(x, y)
  )
```
:::
:::
:::

## Il Datasaurus Dozen Visualizzato {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

::: {style="font-size: 0.7em;"}
```r
library(ggplot2)
library(datasauRus)

ggplot(datasaurus_dozen, aes(x = x, y = y, color = dataset)) +
  geom_point() +
  facet_wrap(~ dataset, ncol = 4) +
  theme_minimal() +
  theme(legend.position = "none")
```

::: {.columns}
::: {.column width="60%"}
**Pattern completamente diversi:**

- ü¶ï Dinosauro
- ‚≠ê Stella
- ‚≠ï Cerchi
- ‚ùå X
- Linee verticali/orizzontali
- ... e molti altri!
:::

::: {.column width="40%"}
::: {.callout-important}
## La Lezione
**Mai fidarsi solo delle statistiche!**

La visualizzazione rivela pattern, outlier, distribuzioni che i numeri nascondono.
:::
:::
:::
:::

## Anscombe's Quartet: Il Predecessore {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

::: {style="font-size: 0.75em;"}
**Prima del Datasaurus, c'era Anscombe (1973)**

::: {.columns}
::: {.column width="50%"}
4 dataset con statistiche IDENTICHE:

- Media X: 9.0
- Media Y: 7.5
- Varianza X: 11.0
- Varianza Y: 4.12
- Correlazione: 0.816
- Equazione regressione: y = 3 + 0.5x

```r
# Built-in in R
data(anscombe)
```
:::

::: {.column width="50%"}
**Ma visualizzati sono completamente diversi:**

1. Relazione lineare perfetta
2. Relazione non-lineare (quadratica)
3. Relazione lineare con outlier
4. Outlier influente (high leverage)

::: {.callout-tip}
## Il messaggio
Sempre visualizzare prima di analizzare statisticamente!
:::
:::
:::
:::

## Best Practices per Pubblicazioni Scientifiche {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

::: {style="font-size: 0.85em;"}
**Perch√© le visualizzazioni contano nella scienza?**

- I grafici sono **strumenti di scoperta** e **comunicazione**
- Permettono di esplorare pattern nei dati
- Comunicano risultati in modo pi√π efficace del testo
- Devono essere **accurati**, **onesti** e **chiari**

**Principio fondamentale**: Un grafico deve **rispettare i dati** e aiutare il lettore a comprenderli
:::

## Percezione Visiva: Come Leggiamo i Grafici {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

::: {style="font-size: 0.75em;"}
**Gerarchia percettiva** (dal pi√π al meno accurato):

1. **Posizione** lungo scala comune (scatter plot, bar chart)
2. **Posizione** lungo scale non allineate (small multiples)
3. **Lunghezza**, **direzione**, **angolo** (slope charts)
4. **Area** (bubble charts) - pi√π difficile da giudicare
5. **Volume**, **curvatura** (3D charts) - evitare!
6. **Colore** - saturazione, tonalit√†

**Implicazione pratica**: Usa posizione quando possibile, evita 3D e pie charts complessi

**Riferimento**: Cleveland & McGill (1984), Ware (2008)
:::

## Principio dell'Inchiostro Proporzionale {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

::: {style="font-size: 0.6em;"}
**The Principle of Proportional Ink** (Wilke, 2019)

> La quantit√† di "inchiostro" usata per rappresentare un valore deve essere proporzionale al valore stesso

**Esempi comuni di violazione:**

- **Bar chart con asse y che non parte da zero** ‚Üí esagera differenze
- **Bubble chart con raggio (non area) proporzionale al valore** ‚Üí distorce percezione
- **Pie chart in 3D** ‚Üí prospettiva distorce proporzioni

**Best practice**: 

- Bar chart ‚Üí sempre asse y da zero
- Bubble chart ‚Üí area ‚àù valore, non raggio
- Evita 3D decorativo
:::

## Onest√† e Integrit√† dei Dati {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

::: {style="font-size: 0.7em;"}
**Errori comuni che distorcono la verit√†:**

**1. Assi manipolati** - EVITA - asse y troncato senza indicazione chiara

**2. Cherry-picking** - Mostrare solo subset favorevole

**3. Dual y-axes** - Scale diverse creano correlazioni spurie ‚Üí **Evitare**

**4. Binning arbitrario** - Bin width cambia la storia ‚Üí mostra pi√π versioni
:::

## Uso Efficace del Colore {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

::: {style="font-size: 0.75em;"}
**Principi per l'uso del colore:**

**1. Accessibilit√†    
- Color blindness** ~8% uomini, ~0.5% donne hanno daltonismo   
- **Soluzione**: palette colorblind-safe (viridis, ColorBrewer)

```r
scale_color_viridis_d()           # discreto
scale_color_viridis_c()           # continuo
scale_color_brewer(palette = "Set2")  # ColorBrewer
```

**2. Tipi di scale cromatiche**    
- **Qualitativa**: categorie non ordinate (Set1, Set2, Dark2)    
- **Sequenziale**: valori ordinati (Blues, Greens, Viridis)    
- **Divergente**: dati con punto medio (RdBu, BrBG) - es. correlazioni

**3. Evita semaforo (rosso-giallo-verde)** - non accessibile
:::

## Codifica Ridondante {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

::: {style="font-size: 0.8em;"}
**Redundant Coding** (Wilke, Ch. 20)

Codifica la **stessa informazione** in modi multipli per robustezza:

**Vantaggi**: 

- Leggibile anche in stampa B/N
- Accessibile per daltonici
- Pi√π facile da interpretare
:::

## Figure Multi-Panel {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

::: {style="font-size: 0.75em;"}
**Best practices per figure composite:**

**1. Small multiples** (faceting) - stessi assi

**2. Composizione con `patchwork`**

**Regole:**

- **Etichette consistenti**: (A), (B), (C) o a), b), c)
- **Font size**: devono essere leggibili alla dimensione finale
- **Aspect ratio**: mantieni proporzioni ragionevoli
- **Caption completo**: ogni panel deve essere comprensibile
:::

## Titoli, Didascalie e Annotazioni {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

::: {style="font-size: 0.75em;"}
**Anatomia di una figura pubblicabile:**

```r
    title = "Breve e informativo",         # opzionale per paper
    subtitle = "Dettagli aggiuntivi",      # opzionale
    x = "Variabile esplicativa [unit√†]",   # SEMPRE con unit√†
    y = "Variabile risposta [unit√†]",      # SEMPRE con unit√†
    color = "Gruppo",                       # etichetta legenda
    caption = "Fonte: Studio XYZ (2024)"   # fonte dati
```

**Per pubblicazioni scientifiche:**

- **Caption nella rivista**, non nel grafico stesso
- **Asse labels**: chiari, con unit√† di misura
- **Legend**: auto-esplicativa
- **Font size**: 8-12pt nella versione finale (usa `theme(text = element_text(size = 12))`)
:::

## Bilanciare Dati e Contesto {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

::: {style="font-size: 0.75em;"}
**Data-ink ratio** (Tufte, 1983)

> Massimizza la proporzione di "inchiostro" dedicato ai dati

**Rimuovi elementi non essenziali:** Ma non esagerare!

- Griglia maggiore: utile per leggere valori
- Assi: necessari per interpretazione
- Legend: essenziale per categorie

**Obiettivo**: Chiarezza, non minimalismo estremo
:::

## Gestione dell'Overlapping {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

::: {style="font-size: 0.75em;"}
**Soluzioni per punti sovrapposti:**

**1. Trasparenza (alpha)**

**2. Jittering**

**3. 2D density / Heatmap**

**4. Contour plots**


**Scegli in base a**: numero punti, messaggio da comunicare, audience
:::

## Dimensione degli Assi e Leggibilit√† {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

::: {style="font-size: 0.75em;"}
**"Use Larger Axis Labels"** (Wilke, Ch. 24)

**Problema comune**: Font troppo piccoli nella versione finale


**Test pratico**: 

- Salva a dimensione finale (es. 6√ó4 pollici per column width)
- Stampa o visualizza al 100%
- Deve essere leggibile senza sforzo
:::

## Salvare Grafici per Pubblicazione {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

::: {style="font-size: 0.75em;"}

**Formati e parametri corretti:**

**Linee guida:**

- **Journal**: PDF/EPS (vettoriale) o TIFF 600dpi
- **Presentazioni**: PNG 300dpi
- **Dimensioni**: verifica Author Guidelines 
:::

## Checklist Finale per Figure Scientifiche {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

::: {style="font-size: 0.5em;"}
**Prima di sottomettere, verifica:**

::: {.columns}
::: {.column width="50%"}
‚úÖ **Accuratezza**

- [ ] Assi partono da zero (bar chart) o range giustificato (scatter)
- [ ] Tutti i dati rappresentati (no cherry-picking)
- [ ] Unit√† di misura specificate
- [ ] Errori/incertezza visualizzati quando appropriato

‚úÖ **Chiarezza**

- [ ] Font leggibili (‚â•8pt)
- [ ] Legenda auto-esplicativa
- [ ] Colori distinguibili e colorblind-safe
- [ ] Overlapping gestito
:::

::: {.column width="50%"}
‚úÖ **Professionalit√†**

- [ ] Formato corretto (PDF/TIFF secondo journal)
- [ ] Risoluzione adeguata (300-600 dpi)
- [ ] Caption completa (fuori dal grafico)
- [ ] Consistenza con altre figure del paper
:::
:::
:::

## Risorse Fondamentali {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

::: {style="font-size: 0.5em;"}
**Libri essenziali:**

- **Wilke (2019)**: [Fundamentals of Data Visualization](https://clauswilke.com/dataviz/) - Principi generali, online gratis
- **Healy (2018)**: [Data Visualization: A Practical Introduction](https://socviz.co/) - Con R e ggplot2
- **Tufte (1983)**: The Visual Display of Quantitative Information - Classico sull'estetica
- **Cairo (2013)**: The Functional Art - Infographic e giornalismo dati

**Articoli scientifici:**

- Cleveland & McGill (1984) - Percezione grafica
- Rougier et al. (2014) - "Ten Simple Rules for Better Figures"

**Online:**

- [ColorBrewer](https://colorbrewer2.org/) - Palette colori
- [R Graph Gallery](https://r-graph-gallery.com/) - Esempi codice
:::

## Cosa significa "gg" in ggplot2? {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

**Grammar of Graphics**

Framework teorico di Leland Wilkinson (1999)

::: {.incremental}
- Sistema per **progettare** visualizzazioni
- Non su cosa √® bello o best practices
- Focus: **come costruire qualsiasi visualizzazione**
- Base per: ggplot2, Tableau, Vega-lite
:::

## La filosofia {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

**Decostruire i grafici** in componenti riutilizzabili

Tutti i grafici (barre, linee, scatter) condividono elementi comuni:

::: {.incremental}
- Scale
- Coordinate
- Trasformazioni statistiche
- Posizioni
- Geometrie
:::

::: {style="font-size: 0.6em;"}
**Mix & Match**: Combina i componenti per creare qualsiasi visualizzazione!
:::

## I 7 componenti principali {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

::: {style="text-align: center;"}
![](images/ggplot2_layers.png){width="60%"}
:::

I layer si sovrappongono dal basso verso l'alto

## Template base di ggplot2 {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

::: {style="font-size: 0.8em;"}
**Struttura completa di un plot ggplot2:**

```r
ggplot(data = <DATA>, mapping = aes(<MAPPINGS>)) + 
  <GEOM_FUNCTION>(
     mapping = aes(<MAPPINGS>),
     stat = <STAT>, 
     position = <POSITION>
  ) +
  <COORDINATE_FUNCTION> +
  <FACET_FUNCTION> +
  <SCALE_FUNCTION> +
  <THEME_FUNCTION>
```

**In pratica** (esempio reale):
```r
ggplot(mpg, aes(x = displ, y = hwy)) +       # Data + Aesthetics
  geom_point(aes(color = class)) +            # Geometries
  facet_wrap(~ year) +                        # Facets
  scale_color_brewer(palette = "Set1") +      # Scales
  coord_cartesian(ylim = c(10, 45)) +         # Coordinates
  theme_minimal()                             # Theme
```
:::

## Layer 1: Data {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

::: {.columns}
::: {.column width="50%"}
Il dataset che vogliamo visualizzare



::: {.callout-important}
## Importante
**ggplot2 lavora meglio con dati "tidy"!**
:::
:::

::: {.column width="50%"}
![](images/ggplot2_layers.png){width="100%"}
:::
:::


## Dati NON-Tidy: Esempio da evitare {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

::: {style="font-size: 0.65em;"}
**Dati in formato "wide" (NON funziona con ggplot2):**

| country     | 1999_cases | 1999_pop | 2000_cases | 2000_pop |
|-------------|------------|----------|------------|----------|
| Afghanistan | 745        | 19987071 | 2666       | 20595360 |
| Brazil      | 37737      | 172006362| 80488      | 174504898|
| China       | 212258     | 1272915272| 213766    | 1280428583|

**Problemi:**

- ‚ùå Le colonne contengono **valori** (anni), non variabili
- ‚ùå Pi√π variabili per riga (cases e pop mescolati)
- ‚ùå Impossibile mappare direttamente

**Soluzione**: Trasformare in formato "long" 
:::

## Dati Tidy: Versione corretta {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

::: {style="font-size: 0.65em;"}
**Stessi dati in formato "long" (‚úÖ funziona con ggplot2):**

| country     | year | cases  | population |
|-------------|------|--------|------------|
| Afghanistan | 1999 | 745    | 19987071   |
| Afghanistan | 2000 | 2666   | 20595360   |
| Brazil      | 1999 | 37737  | 172006362  |
| Brazil      | 2000 | 80488  | 174504898  |
| China       | 1999 | 212258 | 1272915272 |
| China       | 2000 | 213766 | 1280428583 |

**Vantaggi:**

- ‚úÖ Ogni colonna = una **variabile** (country, year, cases, population)
- ‚úÖ Ogni riga = una **osservazione** (paese-anno)
- ‚úÖ Ogni cella = un singolo valore

:::

## Layer 2: Aesthetics - Il Ponte tra Dati e Visual {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

::: {style="font-size: 0.75em;"}
**Definizione formale di "Aesthetic":**

> Un'**estetica** √® qualsiasi propriet√† visuale degli oggetti in un plot che pu√≤ essere controllata per trasmettere informazione

**Il concetto chiave**: Un grafico statistico √® una **mappatura** (mapping) da variabili dei dati ad attributi estetici di oggetti geometrici

::: {.columns}
::: {.column width="50%"}
**Aesthetics fondamentali:**

::: {style="font-size: 0.6em;"}
- `x`, `y` - Posizione nello spazio 2D
- `color` - Colore di bordi/linee/punti
- `fill` - Colore di riempimento
- `size` - Dimensione (area punti)
- `shape` - Forma dei punti
- `alpha` - Trasparenza/opacit√†
- `linetype` - Tipo di linea
:::
:::

::: {.column width="50%"}
::: {style="font-size: 0.7em;"}
**La funzione `aes()`:**

Il "motore" delle mappature estetiche

```r
aes(x = displ, 
    y = hwy, 
    color = class)
```

Crea il **link esplicito** tra colonne del dataset e propriet√† visive
:::
:::
:::
:::

## Aesthetics: Mapping vs Setting  {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

::: {style="font-size: 0.65em;"}
**La dicotomia fondamentale di ggplot2:**

::: {.columns}
::: {.column width="50%"}
**MAPPING (dentro `aes()`)** 

Propriet√† visiva **dipende dai dati**

```r
ggplot(mpg, aes(x = displ, 
                y = hwy, 
                color = class)) +
  geom_point()
```

‚úÖ **Risultato:**

- Colore varia per ogni punto
- Legenda creata automaticamente
- Scala colori applicata automaticamente
- Rappresenta **dati**

**Quando usare:** Per visualizzare una **variabile** del dataset
:::

::: {.column width="50%"}
**SETTING (fuori `aes()`)**

Propriet√† visiva **costante**

```r
ggplot(mpg, aes(x = displ, 
                y = hwy)) +
  geom_point(color = "blue", 
             size = 3, 
             alpha = 0.6)
```

‚úÖ **Risultato:**

- Tutti i punti blu, stessa dimensione
- Nessuna legenda
- Nessuna scala
- Scelta **stilistica**

**Quando usare:** Per impostare uno **stile fisso**
:::
:::
:::

## Aesthetics: L'Errore Comune {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

::: {style="font-size: 0.7em;"}
**Perch√© `aes(color = "blue")` NON produce punti blu?**

```r
# ‚ùå ERRORE COMUNE - Non produce punti blu!
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = "blue"))
```

**La logica formale dietro questo comportamento:**

::: {style="font-size: 0.75em;"}
1. **Interpretazione**: `aes()` interpreta tutto come **dati**, non come istruzioni di stile
2. **Creazione pseudo-variabile**: `"blue"` diventa una variabile temporanea con valore costante `"blue"` per ogni riga
3. **Trattamento categorico**: Questa "variabile" ha un solo livello: la stringa `"blue"`
4. **Invocazione scala**: `scale_color_discrete()` viene applicata automaticamente
5. **Mappatura colore**: La scala assegna il **primo colore della palette** (tipicamente rosso) al livello `"blue"`
6. **Legenda**: Viene generata una legenda che mostra: livello dati = `"blue"` ‚Üí colore = rosso
:::

::: {.callout-important}
## Principio chiave
`aes()` √® uno spazio sacro riservato **esclusivamente** al mapping dati-visual. Qualsiasi valore al suo interno viene interpretato come parte dello **spazio dati**, non dello spazio stilistico.
:::
:::

## Aesthetics: Guida Completa alle Propriet√† Visive {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

::: {style="font-size: 0.38em;"}
| Aesthetic | Propriet√† Controllata | Tipo Dati | Geoms Comuni | Note Importanti |
|-----------|----------------------|-----------|--------------|-----------------|
| `x`, `y` | Posizione sugli assi | Continuo, Discreto | Tutti | Le estetiche pi√π fondamentali |
| `color` | Colore bordi/linee/punti | Continuo, Discreto | `geom_point`, `geom_line` | Per shape 21-25: controlla il bordo |
| `fill` | Colore riempimento | Continuo, Discreto | `geom_bar`, `geom_boxplot` | Solo per geom con area interna |
| `size` | Area punti, dimensione testo | **Continuo** | `geom_point`, `geom_text` | Scala l'**area**, non il raggio. Evitare per variabili discrete |
| `linewidth` | Spessore linee | Continuo | `geom_line`, `geom_smooth` | Introdotto in ggplot2 3.4.0 per controllo esplicito |
| `shape` | Forma punti | **Discreto** | `geom_point` | Max 6 categorie. Shapes 0-20: solidi; 21-25: con bordo+fill |
| `alpha` | Trasparenza (0-1) | Continuo | Tutti | Strumento primario per overplotting |
| `linetype` | Pattern linea | **Discreto** | `geom_line`, `geom_path` | Max 6 categorie (solid, dashed, dotted, etc.) |
| `group` | Raggruppamento dati | Discreto | `geom_line`, `geom_smooth` | **Cruciale** per aggregazione corretta (es. time series) |
| `label` | Contenuto testo | Character | `geom_text`, `geom_label` | Specifica il testo da visualizzare |

::: {.callout-tip}
## Percezione visiva
Posizione > Lunghezza > Angolo > Area > Colore. Usa `x`/`y` per variabili pi√π importanti, `color`/`size` per secondarie.
:::
:::

## Color vs Fill {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

::: {style="font-size: 0.8em;"}
**Due aesthetic per il colore:**

**`color`** - Bordi, linee, punti (contorni):
```r
geom_point(color = "red")      # punti rossi
geom_line(color = "blue")      # linea blu
geom_bar(color = "black")      # bordo barre nero
```

**`fill`** - Riempimento interno (aree):
```r
geom_bar(fill = "steelblue")           # barre riempite
geom_boxplot(fill = "lightgreen")      # box riempiti
geom_violin(fill = "orange")           # violin riempiti
```

**Entrambi insieme**:
```r
geom_bar(fill = "steelblue", color = "black", linewidth = 1)
# ‚Üí Barre blu con bordo nero
```

**Regola pratica**: Geoms con area interna usano `fill`, geoms 1D usano `color`
:::

## Layer 3: Geometries (Geometrie) {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

::: {.columns}
::: {.column width="50%"}
::: {style="font-size: 0.6em;"}
**Forme visive** che rappresentano i dati:

**1D (una variabile):**

- `geom_histogram()`, `geom_density()`, `geom_dotplot()`

**2D (due variabili):**

- `geom_point()` - Scatter plot
- `geom_line()` - Linee connesse
- `geom_smooth()` - Linea di tendenza
- `geom_boxplot()`, `geom_violin()` - Distribuzioni

**Conteggi:**

- `geom_bar()`, `geom_col()` - Barre

**Multipli layer**: Combina pi√π geometrie nello stesso grafico!
:::
:::

::: {.column width="50%"}
![](images/ggplot2_layers.png){width="100%"}
:::
:::

## Layer 3: Geometries {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

::: {style="font-size: 0.8em;"}
**Ogni geom ha parametri specifici:**

```r
# Point: shape, size, alpha
geom_point(shape = 16, size = 3, alpha = 0.7)

# Line: linetype, linewidth
geom_line(linetype = "dashed", linewidth = 1)

# Smooth: method, se (standard error)
geom_smooth(method = "lm", se = TRUE)
```

**I geom ereditano le aesthetics da `ggplot()`** ma possono avere le proprie:

```r
ggplot(mpg, aes(x = displ, y = hwy)) +  # aesthetics globali
  geom_point(aes(color = class)) +       # solo per i punti
  geom_smooth()                           # usa solo x e y
```
:::

## Layer 4: Facets {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

::: {.columns}
::: {.column width="50%"}
::: {style="font-size: 0.8em;"}
**Suddividi** i dati in sottografici multipli (piccoli multipli)


**Potente per**:

- Confrontare sottogruppi
- Evitare sovrapposizione (decluttering)
- Il cervello riusa i pattern visivi tra panel
- Esplorare interazioni tra variabili
:::
:::

::: {.column width="50%"}
![](images/ggplot2_layers.png){width="100%"}
:::
:::

## Layer 4: Facets {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

::: {style="font-size: 0.75em;"}
**Opzioni di personalizzazione:**

```r
# Scale libere per ogni panel
facet_wrap(~ class, scales = "free")     # entrambi liberi
facet_wrap(~ class, scales = "free_x")   # solo x libero
facet_wrap(~ class, scales = "free_y")   # solo y libero

# Etichette personalizzate
facet_wrap(~ class, labeller = label_both)  # mostra "class: suv"

# Margini
facet_grid(drv ~ cyl, margins = TRUE)  # aggiunge totali marginali
```

**Best practice**: Mantieni scale fisse quando possibile per facilitare confronti!
:::

## Layer 5: Stats (Trasformazioni) {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

::: {.columns}
::: {.column width="50%"}
::: {style="font-size: 0.6em;"}
Trasformazioni sui dati **prima** di plottare:

**Stats comuni:**

- `stat_bin()` - Istogrammi (conta in bin)
- `stat_count()` - Bar chart (conta osservazioni)
- `stat_smooth()` - Modelli (lm, loess, gam)
- `stat_boxplot()` - Quartili e outlier
- `stat_summary()` - Funzioni custom (media, mediana, etc.)

Ogni geom ha uno **stat di default**:

```r
geom_histogram()  # stat = "bin"
geom_bar()        # stat = "count"
geom_smooth()     # stat = "smooth"
```
:::
:::

::: {.column width="50%"}
![](images/ggplot2_layers.png){width="100%"}
:::
:::

## Layer 5: Stats {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

::: {style="font-size: 0.75em;"}
**Usare stats direttamente** (invece di geoms):

```r
# Equivalenti
geom_bar(stat = "count")
stat_count(geom = "bar")

# Cambio di stat
geom_bar(stat = "identity")  # usa valori y cos√¨ come sono

# Summary personalizzate
stat_summary(fun = mean, geom = "point", size = 4)
stat_summary(fun.data = mean_se, geom = "errorbar")
```

**Variabili calcolate**: Gli stats creano nuove variabili accessibili con `after_stat()`:

```r
# Istogramma con densit√† invece di conteggi
geom_histogram(aes(y = after_stat(density)))
```

::: {.callout-tip}
## Scoprire le variabili calcolate
Per vedere quali variabili sono disponibili con `after_stat()`, consulta la sezione **Computed variables** nella documentazione di ogni stat: `?stat_bin`, `?stat_count`, `?stat_smooth`, etc.
:::
:::

## Layer 6: Coordinates {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

::: {.columns}
::: {.column width="50%"}
::: {style="font-size: 0.65em;"}
Il "tessuto" su cui plottiamo - operano **dopo** scale:

**Tipi principali:**

- `coord_cartesian()` - Default (x, y piano)
- `coord_flip()` - Scambia x ‚Üî y
- `coord_fixed()` - Ratio fisso (utile per mappe)
- `coord_polar()` - Coordinate polari (pie chart)
- `coord_map()` - Proiezioni geografiche
- `coord_trans()` - Trasformazioni non-lineari

**Zoom senza rimuovere dati:**

```r
coord_cartesian(xlim = c(2, 5),
                ylim = c(10, 30))
```
:::
:::

::: {.column width="50%"}
![](images/ggplot2_layers.png){width="100%"}
:::
:::



## Scales: Il Traduttore Bidirezionale {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

::: {style="font-size: 0.7em;"}
**Le scale traducono BIDIREZIONALMENTE tra dati e propriet√† visive**

::: {.columns}
::: {.column width="50%"}
**Il problema fondamentale:**

I tuoi dati raramente rappresentano direttamente propriet√† grafiche:

- `gender` ‚Üí quale forma?
- `temperature` (15-35¬∞C) ‚Üí quale colore?
- `date` (2020-01-01) ‚Üí quale posizione?
- `category` (A, B, C) ‚Üí quale colore?


:::

::: {.column width="50%"}
**Ogni aesthetics ha la sua scala:**

```r
ggplot(data, aes(x = date, 
                 y = temp,
                 color = city)) +
  geom_line()
  
# ggplot2 applica AUTOMATICAMENTE:
# scale_x_date()       # per x
# scale_y_continuous() # per y
# scale_color_discrete() # per color
```

::: {.callout-important}
## Automatiche ma personalizzabili
Le scale vengono **sempre** applicate, anche se non le specifichi. 
Specificarle esplicitamente ti d√† controllo totale.
:::
:::
:::
:::

## Scales: Anatomia e Pattern {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

::: {style="font-size: 0.6em;"}
**Pattern di nomenclatura sistematico:**

`scale_<aesthetic>_<type>()`

::: {.columns}
::: {.column width="50%"}
**Per POSIZIONI (x, y):**

```r
# Continuous
scale_x_continuous()
scale_y_continuous()

# Trasformazioni
scale_x_log10()      # scala logaritmica
scale_y_sqrt()       # radice quadrata
scale_x_reverse()    # inverte direzione

# Tipi speciali
scale_x_date()       # date/datetime
scale_x_discrete()   # categorie
scale_x_binned()     # bins per continuous
```

**Per COLORE (color/fill):**

```r
# Continuous
scale_color_gradient(low = "blue", high = "red")
scale_color_gradient2(mid = "white")  # divergente
scale_color_viridis_c()  # perceptually uniform

# Discrete
scale_color_brewer(palette = "Set1")
scale_color_manual(values = c("red", "blue"))
scale_fill_grey()    # scala di grigi
```
:::

::: {.column width="50%"}
**Per ALTRE AESTHETICS:**

```r
# Size
scale_size_continuous(range = c(1, 10))
scale_size_area()  # area proporzionale al valore

# Shape
scale_shape_manual(values = c(16, 17, 18))
scale_shape_discrete()

# Alpha (trasparenza)
scale_alpha_continuous(range = c(0.1, 1))

# Linetype
scale_linetype_manual(values = c("solid", "dashed"))
```

**Suffissi importanti:**

- `_manual` ‚Üí valori completamente custom
- `_identity` ‚Üí usa valore letterale dai dati
:::
:::
:::

## Scales: Personalizzazione Completa {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

::: {style="font-size: 0.6em;"}
**Componenti comuni a tutte le scale** (tutti opzionali):

::: {.columns}
::: {.column width="50%"}
```r
scale_color_gradient(
  name = "Temperatura (¬∞C)",  # Titolo legenda/asse
  limits = c(0, 100),         # Range dei dati
  breaks = seq(0, 100, 25),   # Tick marks
  labels = c("0¬∞", "25¬∞", "50¬∞", "75¬∞", "100¬∞"),
  trans = "log10",            # Trasformazione
  guide = guide_colorbar(     # Tipo di guida
    barwidth = 15,
    barheight = 0.5
  )
)
```

**Controllo delle legende/assi:**

```r
# Rimuovi legenda per una aesthetic
scale_color_continuous(guide = "none")

# Multiple guide types
guide_legend()     # legenda discreta
guide_colorbar()   # barra continua
guide_bins()       # bins
guide_axis()       # assi personalizzati
```
:::

::: {.column width="50%"}
**Trasformazioni comuni:**

```r
# Coordinate vs Scale transforms
scale_x_log10()  # trasforma DATI (prima stats)
coord_trans(x = "log10")  # trasforma VISUAL

# Differenza cruciale:
ggplot(data, aes(x, y)) +
  geom_smooth() +
  scale_x_log10()  # smooth su dati log-transformed

ggplot(data, aes(x, y)) +
  geom_smooth() +
  coord_trans(x = "log10")  # smooth su dati originali
```

::: {.callout-tip}
## Scale types riconoscono automaticamente i dati
ggplot2 sceglie intelligentemente:
- `factor/character` ‚Üí `_discrete()`
- `numeric/integer` ‚Üí `_continuous()`  
- `Date/POSIXct` ‚Üí `_date()/_datetime()`

Ma puoi sempre sovrascrivere manualmente!
:::
:::
:::
:::

## Layer 7: Theme {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

::: {.columns}
::: {.column width="50%"}
::: {style="font-size: 0.75em;"}
Controllo completo su elementi **non-data** (tutto ci√≤ che non rappresenta dati):

**Temi built-in**:
```r
theme_gray()      # default
theme_minimal()   # minimalista
theme_classic()   # assi classici
theme_bw()        # bianco e nero
theme_dark()      # sfondo scuro
theme_void()      # vuoto (solo dati)
```

**Pacchetti con temi extra:**

- `ggthemes`: Economist, FiveThirtyEight, Tufte
- `hrbrthemes`: Typography-focused
- `tvthemes`: Simpsons, Game of Thrones...
:::
:::

::: {.column width="50%"}
![](images/ggplot2_layers.png){width="100%"}
:::
:::

## Layer 7: Theme {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

::: {style="font-size: 0.7em;"}
**Personalizzazione con `theme()`** - Categorie principali:

```r
theme(
  # Testo
  plot.title = element_text(size = 16, face = "bold"),
  axis.text = element_text(size = 10),
  axis.title.x = element_text(margin = margin(t = 10)),
  
  # Linee
  axis.line = element_line(color = "black", linewidth = 0.5),
  panel.grid.major = element_line(color = "gray90"),
  panel.grid.minor = element_blank(),  # rimuovi
  
  # Rettangoli/Sfondi
  panel.background = element_rect(fill = "white"),
  plot.background = element_rect(fill = "gray95"),
  
  # Legend
  legend.position = "bottom",  # "none", "left", "right", "top"
  legend.title = element_blank()
)
```
:::


## Theme elements {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

::: {style="font-size: 0.7em;"}
**Quattro tipi di elementi** per personalizzazione completa:

**1. `element_text()`** - Testo (titoli, labels, caption):
```r
plot.title = element_text(
  family = "Helvetica", face = "bold", size = 16, 
  color = "steelblue", hjust = 0.5, margin = margin(b = 10)
)
```

**2. `element_line()`** - Linee (assi, griglie):
```r
axis.line = element_line(color = "black", linewidth = 1, linetype = "solid")
panel.grid = element_line(color = "gray90", linewidth = 0.5)
```

**3. `element_rect()`** - Rettangoli (sfondi, bordi):
```r
panel.background = element_rect(fill = "white", color = "black", linewidth = 1)
legend.background = element_rect(fill = "gray95", color = NA)
```

**4. `element_blank()`** - Rimuove elemento:
```r
panel.grid.minor = element_blank()  # rimuove griglia secondaria
axis.text.y = element_blank()       # rimuove etichette y
```
:::

## Theme elements - Gerarchia {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

::: {style="font-size: 0.7em;"}
**Gerarchia degli elementi** - Da generale a specifico:

```r
theme(
  # Livello 1: Globale
  text = element_text(family = "Arial", size = 12),
  line = element_line(color = "gray30"),
  
  # Livello 2: Categoria
  axis.text = element_text(size = 10),  # eredita family da text
  
  # Livello 3: Specifico (override)
  axis.text.x = element_text(angle = 45, hjust = 1),
  axis.text.y = element_text(color = "red")
)
```

**Tip**: Modifica elementi pi√π generali possibile per consistenza!

**Salvare tema custom**:
```r
my_theme <- theme_minimal() + 
  theme(text = element_text(family = "Roboto"))

# Applica a tutti i plot della sessione
theme_set(my_theme)
```
:::

## Position adjustments {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

::: {style="font-size: 0.8em;"}
Modifica posizione elementi **dentro** un layer (risolve overlapping):

```r
# Identity - nessun aggiustamento (dati sovrapposti)
geom_bar(position = "identity", alpha = 0.5)

# Stack - impilati (default per barre)
geom_bar(position = "stack")

# Dodge - affiancati (gruppi side-by-side)
geom_bar(position = "dodge")

# Fill - impilati a 100%
geom_bar(position = "fill")

# Jitter - rumore casuale (scatter plot con sovrapposizione)
geom_point(position = "jitter")
geom_point(position = position_jitter(width = 0.2, height = 0))
```

**Fondamentale** per visualizzare correttamente dati sovrapposti!
:::



## Layer multipli {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

ggplot2 √® **compositivo** - somma layer!

```r
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = class)) +      # Layer 1
  geom_smooth(color = "black") +         # Layer 2
  geom_rug(sides = "bl")                 # Layer 3
```

Ogni layer pu√≤ avere:    
- Proprie estetiche   
- Propri dati    
- Proprie geometrie   

## Logica > Memorizzazione {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

**Non memorizzare** ogni funzione!

Capisci la **logica**:

- Cambiare aspetto dati? ‚Üí **geoms**
- Cambiare colori/scale? ‚Üí **scales**
- Cambiare elementi non-data? ‚Üí **theme**
- Dividere in sottografici? ‚Üí **facets**

Il sistema √® **consistente** e **prevedibile**

## Componibilit√† {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

I componenti sono progettati per **lavorare insieme**:

- Stessi principi per tutti i tipi di grafici
- Esplorazione sistematica
- Creazione di visualizzazioni originali
- Riduce carico cognitivo

**La grammatica rende ggplot2 intuitivo** una volta capito il sistema!

## Vantaggi del framework {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}


1. **Consistenza**: Stesso approccio per tutti i grafici
2. **Flessibilit√†**: Mix & match componenti
3. **Espandibilit√†**: Facile creare nuove geometrie
4. **Leggibilit√†**: Codice dichiarativo e chiaro
5. **Riproducibilit√†**: Tutto nel codice, no click
6. **Potenza**: Da semplici a complessi con stessa logica

## Ecosistema di estensioni {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

ggplot2 √® una **piattaforma**, non solo un package!

**200+ estensioni** disponibili:

- `patchwork` - Composizione grafici
- `gganimate` - Animazioni
- `ggrepel` - Etichette intelligenti
- `ggraph` - Network/grafi
- `ggridges` - Ridge plots
- ... molte altre!

[Gallery completa](https://exts.ggplot2.tidyverse.org/gallery/)


## Recap: I 7 layer {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

::: {style="font-size: 0.85em;"}
1. **Data** - Dataset (`data = mpg`)
2. **Aesthetics** - Mappature (`aes(x, y, color)`)
3. **Geometries** - Forme visive (`geom_point()`)
4. **Stats** - Trasformazioni (`stat_bin()`)
5. **Scales** - Controllo mappature (`scale_color_*()`)
6. **Coordinate** - Sistema coordinate (`coord_flip()`)
7. **Facets** - Sottografici (`facet_wrap()`)

**+ Theme** per aspetto generale!
:::

## Risorse {background-image="images/frequency-wave-7776034_1280.jpg" background-size="cover" background-opacity="0.1"}

**Libri**:

- [ggplot2 Book](https://ggplot2-book.org/) - Wickham et al.
- [R for Data Science](https://r4ds.hadley.nz/) - Capitoli su ggplot2

**Online**:

- [ggplot2 Cheatsheet](https://github.com/rstudio/cheatsheets)
- [Extension Gallery](https://exts.ggplot2.tidyverse.org/gallery/)
- [R Graph Gallery](https://r-graph-gallery.com/)

**Video**: Thomas Lin Pedersen's workshop (4.5h)
