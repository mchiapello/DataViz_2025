{
  "hash": "e2ccc1205e4157bf3eea3c617edb7a5e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Recap Giorno 1\"\nsubtitle: \"Riepilogo Geometrie ed Estetiche\"\nauthor: \"Marco Chiapello\"\nformat: \n  revealjs:\n    theme: simple\n    transition: slide\n    slide-number: true\n    chalkboard: true\n    logo: images/ggplot2_logo.jpg\n    footer: \"REVELO Training - Data Viz 2025\"\n    css: presentation-style.css\n    title-slide-attributes:\n      data-background-image: images/frequency-wave-7776034_1280.jpg\n      data-background-size: cover\n      data-background-opacity: \"0.1\"\nresources:\n  - images/\n  - presentation-style.css\n---\n\n## Benvenuti al Giorno 2! {background-image=\"images/frequency-wave-7776034_1280.jpg\" background-size=\"cover\" background-opacity=\"0.1\"}\n\n::: {style=\"font-size: 0.8em;\"}\n**Oggi iniziamo con un riepilogo del Giorno 1**\n\n**Cosa abbiamo visto:**\n\n1. ✅ **Geometrie Base** - I mattoni della visualizzazione\n2. ✅ **Estetiche e Mappature** - Come collegare dati a proprietà visive\n\n**Obiettivi di questo recap:**\n\n- Consolidare concetti chiave\n- Chiarire dubbi\n- Preparare la base per argomenti avanzati\n- Esercizio pratico di riscaldamento\n\n:::\n\n# Geometrie Base {background-image=\"images/frequency-wave-7776034_1280.jpg\" background-size=\"cover\" background-opacity=\"0.1\"}\n\n## Categorie di Geometrie {background-image=\"images/frequency-wave-7776034_1280.jpg\" background-size=\"cover\" background-opacity=\"0.1\"}\n\n::: {style=\"font-size: 0.6em;\"}\n::: {.columns}\n::: {.column width=\"50%\"}\n**1. Relazioni (2 variabili continue)**\n\n- `geom_point()` - scatter plot\n- `geom_line()` - time series (ordinato per x)\n- `geom_path()` - traiettorie (ordine dati)\n- `geom_smooth()` - trend lines\n\n**2. Distribuzioni 1D**\n\n- `geom_histogram()` - barre di frequenza\n- `geom_density()` - curve smooth\n- `geom_freqpoly()` - histogram come linea\n- `geom_dotplot()` - ogni punto visibile\n:::\n\n::: {.column width=\"50%\"}\n**3. Distribuzioni 2D**\n\n- `geom_bin2d()` - heatmap rettangolare\n- `geom_hex()` - heatmap esagonale\n- `geom_density2d()` - contour lines\n\n**4. Statistiche Riassuntive**\n\n- `geom_boxplot()` - mediana, quartili, outliers\n- `geom_violin()` - forma distribuzione completa\n- `geom_bar()` / `geom_col()` - conteggi/valori\n\n**5. Incertezza**\n\n- `geom_errorbar()`, `geom_pointrange()`, `geom_ribbon()`\n:::\n:::\n:::\n\n## Geometrie: Punti Chiave {background-image=\"images/frequency-wave-7776034_1280.jpg\" background-size=\"cover\" background-opacity=\"0.1\"}\n\n::: {style=\"font-size: 0.66em;\"}\n**Cosa ricordare:**\n\n1. **Ogni geom interpreta i dati in modo specifico**\n   ```r\n   geom_point()      # ogni riga = 1 punto\n   geom_histogram()  # conta frequenze\n   geom_boxplot()    # calcola statistiche riassuntive\n   ```\n\n2. **Si possono combinare più geom**\n   ```r\n   ggplot(mpg, aes(x = displ, y = hwy)) +\n     geom_point(alpha = 0.3) +\n     geom_smooth(method = \"lm\")\n   ```\n\n3. **Ogni geom ha parametri specifici**\n   - `geom_histogram()`: `bins`, `binwidth`\n   - `geom_smooth()`: `method`, `se`, `level`\n   - `geom_point()`: `size`, `shape`, `alpha`\n\n::: {.callout-tip}\n## Regola pratica\nInizia sempre con il geom più semplice, poi aggiungi complessità.\n:::\n:::\n\n# Estetiche e Mappature {background-image=\"images/frequency-wave-7776034_1280.jpg\" background-size=\"cover\" background-opacity=\"0.1\"}\n\n## Le 6 Estetiche Principali {background-image=\"images/frequency-wave-7776034_1280.jpg\" background-size=\"cover\" background-opacity=\"0.1\"}\n\n::: {style=\"font-size: 0.7em;\"}\n::: {.columns}\n::: {.column width=\"50%\"}\n**1. Color (bordi/linee)**\n```r\naes(color = class)\n```\n- Discrete: colori distinti per categoria\n- Continue: gradient di colore\n\n**2. Fill (riempimento aree)**\n```r\naes(fill = drv)\n```\n- Per bar, histogram, density, violin\n- Indipendente da `color`\n\n**3. Size (dimensione)**\n```r\naes(size = cyl)\n```\n- Bubble charts\n- Enfatizzare importanza\n:::\n\n::: {.column width=\"50%\"}\n**4. Shape (forma punti)**\n```r\naes(shape = drv)\n```\n- Max 6-7 forme distinguibili\n- Utile per accessibilità\n\n**5. Alpha (trasparenza)**\n```r\naes(alpha = depth)\n# oppure fisso:\ngeom_point(alpha = 0.3)\n```\n- Gestire overplotting\n- Mostrare densità\n\n**6. Linetype (tipo linea)**\n```r\naes(linetype = type)\n```\n- Per linee e bordi\n:::\n:::\n:::\n\n## Mapping vs Setting: LA Distinzione Chiave {background-image=\"images/frequency-wave-7776034_1280.jpg\" background-size=\"cover\" background-opacity=\"0.1\"}\n\n::: {style=\"font-size: 0.65em;\"}\n::: {.columns}\n::: {.column width=\"50%\"}\n**MAPPING** (dentro `aes()`)\n\nProprietà **dipende dai dati**\n\n```r\nggplot(mpg, aes(x = displ, y = hwy,\n                color = class,    # VARIA\n                size = cyl)) +    # VARIA\n  geom_point()\n```\n\n✅ Crea scala automatica  \n✅ Genera legenda  \n✅ Usa nome variabile\n\n**Quando usare:**\n- Vuoi che colore/size/etc. cambi con i dati\n- Vuoi distinguere gruppi\n- Hai bisogno di legenda\n:::\n\n::: {.column width=\"50%\"}\n**SETTING** (fuori `aes()`)\n\nProprietà **fissa per tutti**\n\n```r\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point(color = \"blue\",    # FISSO\n             size = 3,          # FISSO\n             alpha = 0.6)       # FISSO\n```\n\n❌ Nessuna scala  \n❌ Nessuna legenda  \n✅ Valore diretto\n\n**Quando usare:**\n- Vuoi migliorare leggibilità\n- Stile costante per tutto il layer\n- Non servono legende\n:::\n:::\n\n::: {.callout-important}\n## Errore più comune\n`aes(color = \"blue\")` ❌ crea variabile chiamata \"blue\"!  \nUsa `geom_point(color = \"blue\")` ✅ per colore fisso.\n:::\n:::\n\n## Combinazioni di Estetiche {background-image=\"images/frequency-wave-7776034_1280.jpg\" background-size=\"cover\" background-opacity=\"0.1\"}\n\n::: {style=\"font-size: 0.7em;\"}\n**Si possono combinare mapping e setting:**\n\n```r\n# Color mappato + size fisso + alpha fisso\nggplot(mpg, aes(x = displ, y = hwy, color = class)) +\n  geom_point(size = 3, alpha = 0.6)\n\n# Multiple aesthetics mappate\nggplot(mpg, aes(x = displ, y = hwy, \n                color = class,    # gruppi principali\n                shape = drv)) +   # sottogruppi\n  geom_point(size = 3)            # dimensione fissa\n```\n\n**Linee guida:**\n\n- Max 3-4 aesthetics mappate (oltre x, y)\n- Usa ridondanza intelligente: color + shape per stesso gruppo\n- Setting per migliorare leggibilità: `alpha`, `size` fissi\n- Priorità percettiva: Posizione > Size > Color > Shape\n\n:::\n\n# Concetti Trasversali {background-image=\"images/frequency-wave-7776034_1280.jpg\" background-size=\"cover\" background-opacity=\"0.1\"}\n\n## Color vs Fill {background-image=\"images/frequency-wave-7776034_1280.jpg\" background-size=\"cover\" background-opacity=\"0.1\"}\n\n::: {style=\"font-size: 0.7em;\"}\n::: {.columns}\n::: {.column width=\"50%\"}\n**COLOR** = bordi, linee, punti\n\n```r\n# Punti\nggplot(mpg, aes(x = displ, y = hwy,\n                color = class)) +\n  geom_point()\n\n# Linee\nggplot(economics, aes(x = date, y = unemploy)) +\n  geom_line(color = \"blue\")\n\n# Bordi di barre\nggplot(mpg, aes(x = class)) +\n  geom_bar(color = \"black\")\n```\n:::\n\n::: {.column width=\"50%\"}\n**FILL** = riempimento aree\n\n```r\n# Barre\nggplot(mpg, aes(x = class, fill = drv)) +\n  geom_bar()\n\n# Densità\nggplot(mpg, aes(x = hwy, fill = drv)) +\n  geom_density(alpha = 0.5)\n\n# Boxplot\nggplot(mpg, aes(x = class, y = hwy,\n                fill = class)) +\n  geom_boxplot()\n```\n:::\n:::\n\n**Spesso insieme:**\n```r\ngeom_bar(fill = \"lightblue\", color = \"black\")  # fill interno + color bordo\n```\n:::\n\n## Scale Automatiche {background-image=\"images/frequency-wave-7776034_1280.jpg\" background-size=\"cover\" background-opacity=\"0.1\"}\n\n::: {style=\"font-size: 0.7em;\"}\n**Quando mappi un'estetica, ggplot2 crea automaticamente la scala appropriata:**\n\n::: {.columns}\n::: {.column width=\"50%\"}\n**Variabili Discrete:**\n\n```r\naes(color = class)\n```\n→ `scale_color_discrete()` automatica  \n→ Colori distinti per categoria  \n→ Legenda con tutti i livelli\n\n**Variabili Continue:**\n\n```r\naes(color = cty)\n```\n→ `scale_color_continuous()` automatica  \n→ Gradient blu scuro → blu chiaro  \n→ Legenda con barra colore\n:::\n\n::: {.column width=\"50%\"}\n**Personalizzabili:**\n\n```r\n# Palette migliori\n+ scale_color_viridis_d()  # discrete\n+ scale_color_viridis_c()  # continuous\n\n# Manuale\n+ scale_color_manual(\n    values = c(\"red\", \"blue\", \"green\")\n  )\n\n# Gradient custom\n+ scale_color_gradient(\n    low = \"yellow\", \n    high = \"red\"\n  )\n```\n\n(Approfondimento: Giorno 2!)\n:::\n:::\n:::\n\n## Gestire Overplotting {background-image=\"images/frequency-wave-7776034_1280.jpg\" background-size=\"cover\" background-opacity=\"0.1\"}\n\n::: {style=\"font-size: 0.7em;\"}\n**Problema comune: troppi punti sovrapposti**\n\n**Soluzioni imparate:**\n\n1. **Alpha (trasparenza)**\n   ```r\n   geom_point(alpha = 0.3)  # più punti = più scuro\n   ```\n\n2. **Jitter (rumore casuale)**\n   ```r\n   geom_jitter(width = 0.1, height = 0.1)\n   ```\n\n3. **Heatmaps 2D**\n   ```r\n   geom_bin2d()  # o geom_hex()\n   ```\n\n4. **Dimensione ridotta**\n   ```r\n   geom_point(size = 0.5, alpha = 0.2)\n   ```\n\n5. **Combinazioni**\n   ```r\n   geom_hex() + geom_density2d(color = \"white\")\n   ```\n:::\n\n# Esercizi di Riscaldamento {background-image=\"images/frequency-wave-7776034_1280.jpg\" background-size=\"cover\" background-opacity=\"0.1\"}\n\n## Esercizio 1: Geometrie Multiple {background-image=\"images/frequency-wave-7776034_1280.jpg\" background-size=\"cover\" background-opacity=\"0.1\"}\n\n::: {style=\"font-size: 0.75em;\"}\n**Ricrea questo grafico usando il dataset `mpg`:**\n\n1. Scatter plot di `displ` (x) vs `hwy` (y)\n2. Aggiungi linea di trend lineare con intervallo di confidenza\n3. Punti semi-trasparenti (alpha = 0.4)\n4. Dimensione punti = 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\n# Il tuo codice qui:\nggplot(mpg, aes(x = ___, y = ___)) +\n  geom_____(___) +\n  geom_____(___) \n```\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n## Soluzione\n```r\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point(alpha = 0.4, size = 2) +\n  geom_smooth(method = \"lm\")\n```\n:::\n:::\n\n## Esercizio 2: Mapping vs Setting {background-image=\"images/frequency-wave-7776034_1280.jpg\" background-size=\"cover\" background-opacity=\"0.1\"}\n\n::: {style=\"font-size: 0.75em;\"}\n**Dataset `mpg`, crea due versioni:**\n\n**Versione A:**\n- Scatter plot `displ` vs `hwy`\n- Colore **mappato** a `class`\n- Size fisso = 3\n\n**Versione B:**\n- Stesso scatter plot\n- Colore **fisso** = \"darkred\"\n- Size **mappato** a `cyl`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Versione A\nggplot(mpg, aes(x = displ, y = hwy, ___)) +\n  geom_point(___)\n\n# Versione B\nggplot(mpg, aes(x = displ, y = hwy, ___)) +\n  geom_point(___)\n```\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n## Soluzione\n```r\n# A\nggplot(mpg, aes(x = displ, y = hwy, color = class)) +\n  geom_point(size = 3)\n\n# B\nggplot(mpg, aes(x = displ, y = hwy, size = cyl)) +\n  geom_point(color = \"darkred\")\n```\n:::\n:::\n\n## Esercizio 3: Distribuzioni con Fill {background-image=\"images/frequency-wave-7776034_1280.jpg\" background-size=\"cover\" background-opacity=\"0.1\"}\n\n::: {style=\"font-size: 0.75em;\"}\n**Dataset `mpg`, crea:**\n\n1. Density plot di `hwy`\n2. Fill mappato a `drv` (tipo trazione)\n3. Alpha = 0.5 per vedere sovrapposizioni\n4. Aggiungi bordo nero a ogni curva\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = hwy, ___)) +\n  geom_density(___, ___)\n```\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n## Soluzione\n```r\nggplot(mpg, aes(x = hwy, fill = drv)) +\n  geom_density(alpha = 0.5, color = \"black\")\n```\n:::\n\n**Domanda:** Cosa succede se usi `color = drv` invece di `fill = drv`?\n\n::: {.callout-note collapse=\"true\"}\n## Risposta\n`color` colora solo il **bordo** della curva, non l'area interna. `fill` riempie l'area sotto la curva.\n:::\n:::\n\n## Esercizio 4: Boxplot + Violin {background-image=\"images/frequency-wave-7776034_1280.jpg\" background-size=\"cover\" background-opacity=\"0.1\"}\n\n::: {style=\"font-size: 0.75em;\"}\n**Dataset `mpg`, sovrapponi:**\n\n1. Violin plot di `class` (x) vs `hwy` (y)\n2. Fill = \"lightblue\", alpha = 0.6\n3. Aggiungi boxplot sopra\n4. Boxplot: width = 0.2, fill = \"white\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = class, y = hwy)) +\n  geom_____(___) +\n  geom_____(___) \n```\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n## Soluzione\n```r\nggplot(mpg, aes(x = class, y = hwy)) +\n  geom_violin(fill = \"lightblue\", alpha = 0.6) +\n  geom_boxplot(width = 0.2, fill = \"white\")\n```\n:::\n\n**Perché questa combinazione è utile?**  \nViolin mostra la forma completa della distribuzione, boxplot aggiunge statistiche chiave (mediana, quartili).\n:::\n\n# Domande e Chiarimenti {background-image=\"images/frequency-wave-7776034_1280.jpg\" background-size=\"cover\" background-opacity=\"0.1\"}\n\n## Spazio per Domande {background-image=\"images/frequency-wave-7776034_1280.jpg\" background-size=\"cover\" background-opacity=\"0.1\"}\n\n::: {style=\"font-size: 0.8em;\"}\n**Temi comuni da chiarire:**\n\n- Quando usare `geom_bar()` vs `geom_col()`?\n- Come scegliere il numero di bins in `geom_histogram()`?\n- Differenza tra `geom_line()` e `geom_path()`?\n- Quando mappare alpha vs quando fissarlo?\n- Come combinare color e fill efficacemente?\n\n**Domande dal gruppo:**\n\n_(Spazio per discussione)_\n\n:::\n\n# Preview Giorno 2 {background-image=\"images/frequency-wave-7776034_1280.jpg\" background-size=\"cover\" background-opacity=\"0.1\"}\n\n## Cosa Vedremo Oggi {background-image=\"images/frequency-wave-7776034_1280.jpg\" background-size=\"cover\" background-opacity=\"0.1\"}\n\n::: {style=\"font-size: 0.7em;\"}\n**Mattina:**\n\n1. **Facets e Coordinate**\n   - `facet_wrap()` e `facet_grid()` - small multiples\n   - Sistemi di coordinate: cartesiano, flip, polare\n   - Quando usare facets vs aesthetics\n\n2. **Scale e Trasformazioni**\n   - Personalizzare scale (color, size, x, y)\n   - Trasformazioni (log, sqrt, reverse)\n   - Limiti e breaks\n   - Palette avanzate\n\n**Pomeriggio:**\n\n3. **Themes e Personalizzazione**\n   - Theme predefiniti\n   - Customizzare ogni elemento\n   - Creare il tuo theme\n   \n4. **Visualizzazioni Avanzate**\n   - Annotazioni e labels\n   - Plot composition (patchwork)\n   - Export e ottimizzazione\n\n:::\n\n## Risorse Utili {background-image=\"images/frequency-wave-7776034_1280.jpg\" background-size=\"cover\" background-opacity=\"0.1\"}\n\n::: {style=\"font-size: 0.7em;\"}\n**Documentazione:**\n\n- [ggplot2 Reference](https://ggplot2.tidyverse.org/reference/)\n- [ggplot2 Book (3rd ed)](https://ggplot2-book.org/)\n- [R Graph Gallery](https://r-graph-gallery.com/)\n\n**Cheat sheets:**\n\n- [ggplot2 cheat sheet](https://github.com/rstudio/cheatsheets/blob/main/data-visualization.pdf)\n\n**Dataset per pratica:**\n\n- `mpg`, `diamonds`, `economics` (già usati)\n- `mtcars`, `iris`, `faithful` (altri built-in)\n- I tuoi dati! Prova a replicare questi concetti\n\n::: {.callout-note}\n## Ricorda\nLa pratica è fondamentale! Continua a sperimentare con gli esercizi.\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}