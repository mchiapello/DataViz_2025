{
  "hash": "159de3e29a8966b4a19b276d269c6a2f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Visualizzazioni Avanzate\"\n---\n\n## Tecniche avanzate\n\nApprofondiamo tecniche più sofisticate per creare visualizzazioni efficaci.\n\n## Composizione di grafici con patchwork\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(patchwork)\n\n# Creare più grafici\np1 <- ggplot(data1, aes(x, y)) + geom_point()\np2 <- ggplot(data2, aes(x, y)) + geom_line()\np3 <- ggplot(data3, aes(x)) + geom_histogram()\n\n# Combinare\np1 + p2           # Affiancati\np1 / p2           # Uno sopra l'altro\n(p1 + p2) / p3    # Layout complesso\n```\n:::\n\n\n## Annotazioni\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Testo\nggplot(data, aes(x, y)) +\n  geom_point() +\n  annotate(\"text\", x = 5, y = 10, label = \"Punto importante\")\n\n# Forme\nggplot(data, aes(x, y)) +\n  geom_point() +\n  annotate(\"rect\", xmin = 2, xmax = 4, ymin = 5, ymax = 8, \n           alpha = 0.2, fill = \"red\")\n```\n:::\n\n\n## Etichette con ggrepel\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggrepel)\n\nggplot(data, aes(x, y, label = name)) +\n  geom_point() +\n  geom_text_repel()  # Evita sovrapposizioni\n```\n:::\n\n\n## Grafici interattivi con plotly\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(plotly)\n\np <- ggplot(data, aes(x, y)) + geom_point()\nggplotly(p)  # Rende il grafico interattivo\n```\n:::\n\n\n## Mappe con geom_sf\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\n\nggplot(map_data) +\n  geom_sf(aes(fill = value))\n```\n:::\n\n\n## Visualizzazioni statistiche\n\n### Intervalli di confidenza\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data, aes(x = category, y = value)) +\n  stat_summary(fun.data = mean_se, geom = \"errorbar\")\n```\n:::\n\n\n### Regressioni\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data, aes(x, y)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\n```\n:::\n\n\n### Density plots 2D\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data, aes(x, y)) +\n  geom_density_2d_filled()\n```\n:::\n\n\n## Ridge plots\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggridges)\n\nggplot(data, aes(x = value, y = category)) +\n  geom_density_ridges()\n```\n:::\n\n\n## Heatmaps\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data, aes(x = x, y = y, fill = value)) +\n  geom_tile() +\n  scale_fill_viridis_c()\n```\n:::\n\n\n## Grafici animati con gganimate\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gganimate)\n\nggplot(data, aes(x, y)) +\n  geom_point() +\n  transition_states(time) +\n  labs(title = \"Time: {closest_state}\")\n```\n:::\n\n\n## Best practices\n\n1. **Scegli il grafico giusto** per i tuoi dati\n2. **Semplicità**: evita grafici troppo complessi\n3. **Colori**: usa palette accessibili\n4. **Etichette**: sempre chiare e complete\n5. **Contesto**: aggiungi titoli e caption\n6. **Riproducibilità**: salva il codice\n\n## Esercizi\n\n1. Crea una composizione di 3 grafici\n2. Aggiungi annotazioni a un grafico\n3. Crea un grafico con etichette non sovrapposte\n4. Prova a creare un grafico interattivo\n\n## Risorse\n\n- [patchwork](https://patchwork.data-imaginist.com/)\n- [ggrepel](https://ggrepel.slowkow.com/)\n- [plotly for R](https://plotly.com/r/)\n- [gganimate](https://gganimate.com/)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}