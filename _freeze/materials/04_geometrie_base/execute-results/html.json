{
  "hash": "dccbabd7bed70e7d0a88437b2d468cd4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Geometrie Base in ggplot2\"\nsubtitle: \"Hands-on Workshop\"\nauthor: \"Marco Chiapello\"\nformat: \n  revealjs:\n    theme: simple\n    transition: slide\n    slide-number: true\n    chalkboard: true\n    logo: images/ggplot2_logo.jpg\n    footer: \"REVELO Training - Data Viz 2025\"\n    css: presentation-style.css\n    title-slide-attributes:\n      data-background-image: images/frequency-wave-7776034_1280.jpg\n      data-background-size: cover\n      data-background-opacity: \"0.1\"\nresources:\n  - images/\n  - presentation-style.css\n---\n\n## Obiettivi della Sessione {background-image=\"images/frequency-wave-7776034_1280.jpg\" background-size=\"cover\" background-opacity=\"0.1\"}\n\n::: {style=\"font-size: 0.85em;\"}\n**Cosa impareremo oggi:**\n\n- Esplorare le **geometrie fondamentali** di ggplot2\n- Comprendere quando usare ogni tipo di geom\n- Praticare con **20+ esercizi** su dati reali\n- Focus su aesthetics **x** e **y** (altri aesthetics: sessioni successive)\n\n**Approccio:**\n\n1. Teoria per ogni categoria di geom\n2. Esempi pratici\n3. Esercizi guidati\n4. Download materiali: [esercizi](04_geometrie_base_exercises.R)\n\n::: {.callout-tip}\n## Materiali disponibili\nFile esercizi scaricabile: `04_geometrie_base_exercises.qmd`\n:::\n:::\n\n## Cos'è una Geometria? {background-image=\"images/frequency-wave-7776034_1280.jpg\" background-size=\"cover\" background-opacity=\"0.1\"}\n\n::: {.columns}\n::: {.column width=\"50%\"}\n::: {style=\"font-size: 0.7em;\"}\n**Definizione:**\n\nLe geometrie (`geom_*`) sono gli **oggetti geometrici** che rappresentano i dati nel grafico.\n\n**Ogni geom:**\n\n- Interpreta i dati in modo specifico\n- Ha parametri personalizzabili\n- Può essere combinato con altri geom\n- Eredita mapping da `ggplot()` o definisce i propri\n\n**Struttura base:**\n\n```r\nggplot(data, aes(x = var1, y = var2)) +\n  geom_TIPO()\n```\n:::\n:::\n\n::: {.column width=\"50%\"}\n::: {style=\"font-size: 0.675em;\"}\n**Categorie principali:**\n\n1. **Relazioni** (scatter, line, smooth)\n2. **Distribuzioni 1D** (histogram, density, dotplot)\n3. **Distribuzioni 2D** (bin2d, hex, density2d)\n4. **Statistiche riassuntive** (boxplot, violin, bar)\n5. **Incertezza** (errorbar, linerange, ribbon)\n6. **Combinazioni** (multipli geom insieme)\n\n::: {.callout-important}\n## Oggi: solo x e y\nFocus esclusivo su mappature `x` e `y`. \nColor, size, shape, etc. → prossime sessioni.\n:::\n:::\n:::\n:::\n\n# Geoms per Relazioni {background-image=\"images/frequency-wave-7776034_1280.jpg\" background-size=\"cover\" background-opacity=\"0.1\"}\n\n## geom_point(): Scatter Plot {background-image=\"images/frequency-wave-7776034_1280.jpg\" background-size=\"cover\" background-opacity=\"0.1\"}\n\n::: {.columns}\n::: {.column width=\"50%\"}\n::: {style=\"font-size: 0.7em;\"}\n**Quando usarlo:**\n\n- Relazione tra **due variabili continue**\n- Identificare correlazioni, cluster, outlier\n- Ogni punto = una osservazione\n\n**Parametri principali:**\n\n```r\ngeom_point(\n  size = 2,        # dimensione punti\n  alpha = 0.5,     # trasparenza (0-1)\n  shape = 16       # forma (0-25)\n)\n```\n\n**Esempio:**\n\n```r\nlibrary(ggplot2)\n\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point()\n```\n:::\n:::\n\n::: {.column width=\"50%\"}\n::: {style=\"font-size: 0.605em;\"}\n**Situazioni ideali:**\n\n- ✅ Correlazioni continue\n- ✅ Dataset con centinaia/migliaia di punti\n- ✅ Esplorare pattern generali\n\n**Problemi comuni:**\n\n- ⚠️ **Overplotting**: troppi punti sovrapposti\n  - Soluzione: `alpha` basso\n- ⚠️ **Punti identici nascosti**\n  - Soluzione: `geom_jitter()`\n\n**Varianti:**\n\n```r\n# Aggiunge jitter (piccolo rumore casuale)\ngeom_jitter(width = 0.1, height = 0.1)\n\n# Conta punti sovrapposti\ngeom_count()\n```\n:::\n:::\n:::\n\n## geom_line() & geom_path() {background-image=\"images/frequency-wave-7776034_1280.jpg\" background-size=\"cover\" background-opacity=\"0.1\"}\n\n::: {.columns}\n::: {.column width=\"50%\"}\n::: {style=\"font-size: 0.7em;\"}\n**geom_line():**\n\nConnette punti **ordinati per x**\n\n```r\nggplot(economics, aes(x = date, y = unemploy)) +\n  geom_line()\n```\n\n**Quando usarlo:**\n\n- Time series\n- Trend temporali\n- Dati ordinati naturalmente\n\n**Parametri:**\n\n```r\ngeom_line(\n  linewidth = 1,\n  linetype = \"solid\"  # \"dashed\", \"dotted\"\n)\n```\n:::\n:::\n\n::: {.column width=\"50%\"}\n::: {style=\"font-size: 0.7em;\"}\n**geom_path():**\n\nConnette punti **nell'ordine dei dati**\n\n```r\nggplot(data, aes(x = x, y = y)) +\n  geom_path()\n```\n\n**Quando usarlo:**\n\n- Traiettorie\n- Percorsi non ordinati per x\n- Dati spaziali\n\n::: {.callout-tip}\n## line vs path\n- `geom_line()`: ordina per x\n- `geom_path()`: rispetta ordine righe\n:::\n:::\n:::\n:::\n\n## geom_smooth(): Trend Lines {background-image=\"images/frequency-wave-7776034_1280.jpg\" background-size=\"cover\" background-opacity=\"0.1\"}\n\n::: {style=\"font-size: 0.7em;\"}\n**Aggiunge linea di trend con intervallo di confidenza**\n\n::: {.columns}\n::: {.column width=\"50%\"}\n**Metodi disponibili:**\n\n```r\n# LOESS - default per n < 1000 (smooth locale)\ngeom_smooth(method = \"loess\")\n\n# Lineare\ngeom_smooth(method = \"lm\")\n\n# GAM - General Additive Model\ngeom_smooth(method = \"gam\")\n\n# GLM - Generalized Linear Model\ngeom_smooth(method = \"glm\")\n```\n\n**Parametri:**\n\n```r\ngeom_smooth(\n  method = \"lm\",\n  se = TRUE,      # mostra intervallo confidenza\n  level = 0.95,   # livello confidenza\n  formula = y ~ x # formula personalizzata\n)\n```\n:::\n\n::: {.column width=\"50%\"}\n**Esempio completo:**\n\n```r\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point(alpha = 0.3) +\n  geom_smooth(method = \"lm\", se = TRUE)\n```\n\n**Quando usarlo:**\n\n- Identificare trend generali\n- Confrontare relazioni lineari/non-lineari\n- Aggiungere a scatter plot\n\n::: {.callout-warning}\n## Attenzione\n`geom_smooth()` **non** sostituisce analisi statistica formale. \nÈ uno strumento esplorativo!\n:::\n:::\n:::\n:::\n\n# Distribuzioni: 1 Variabile {background-image=\"images/frequency-wave-7776034_1280.jpg\" background-size=\"cover\" background-opacity=\"0.1\"}\n\n## geom_histogram(): Istogrammi {background-image=\"images/frequency-wave-7776034_1280.jpg\" background-size=\"cover\" background-opacity=\"0.1\"}\n\n::: {.columns}\n::: {.column width=\"50%\"}\n::: {style=\"font-size: 0.7em;\"}\n**Quando usarlo:**\n\n- Distribuzione di **1 variabile continua**\n- Vedere forma, centro, spread\n- Identificare skewness, modalità\n\n**Solo aesthetic x:**\n\n```r\nggplot(mpg, aes(x = hwy)) +\n  geom_histogram()\n```\n\n\n## Bar plots (Grafici a barre) {background-image=\"images/frequency-wave-7776034_1280.jpg\" background-size=\"cover\" background-opacity=\"0.1\"}\n\n\n::: {.cell}\n\n:::\n\n\n### Histograms (Istogrammi)\n\n\n::: {.cell}\n\n:::\n\n\n### Box plots\n\n\n::: {.cell}\n\n:::\n\n\n## Combinare geometrie\n\n\n::: {.cell}\n\n:::\n\n\n## Esercizi\n\n1. Crea un scatter plot\n2. Crea un grafico a barre\n3. Combina due geometrie diverse\n\n## Risorse\n\n- [ggplot2 geoms reference](https://ggplot2.tidyverse.org/reference/#geoms)\n- [R Graph Gallery](https://r-graph-gallery.com/)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}