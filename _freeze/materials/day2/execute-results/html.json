{
  "hash": "825ead1375daf4ebd962f3b7b9b64d82",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Giorno 2 - Visualizzazioni Avanzate\"\n---\n\n## Benvenuti al Giorno 2! 🚀\n\nOggi ci concentreremo su tecniche avanzate di visualizzazione e personalizzazione.\n\n## Materiali\n\n### Slides\n\n- [Scale e Trasformazioni](slides/06_scales.pdf) (da aggiungere)\n- [Themes e Personalizzazione](slides/07_themes.pdf) (da aggiungere)\n- [Visualizzazioni Avanzate](slides/08_advanced_viz.pdf) (da aggiungere)\n- [Best Practices](slides/09_best_practices.pdf) (da aggiungere)\n\n### Script\n\n- [06_scales.R](scripts/day2/06_scales.R) (da aggiungere)\n- [07_themes.R](scripts/day2/07_themes.R) (da aggiungere)\n- [08_advanced.R](scripts/day2/08_advanced.R) (da aggiungere)\n\n## Programma Dettagliato\n\n### 9:30 - 10:00: Recap Giorno 1 {#recap}\n\n**Ripasso veloce:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\n# I 3 componenti essenziali\nggplot(penguins, aes(flipper_length_mm, body_mass_g)) +  # data + aes\n  geom_point(aes(color = species)) +                      # geometry\n  facet_wrap(~island)                                     # facet\n\n# Quiz interattivo e domande\n```\n:::\n\n\n### 10:00 - 10:45: Scale e Trasformazioni {#scales}\n\n**Scale: controllare la mappatura tra dati e estetiche**\n\n#### Scale per Posizione\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Limiti e breaks\nggplot(penguins, aes(flipper_length_mm, body_mass_g)) +\n  geom_point() +\n  scale_x_continuous(\n    limits = c(170, 235),\n    breaks = seq(170, 235, by = 10)\n  ) +\n  scale_y_continuous(\n    limits = c(2500, 6500),\n    breaks = seq(2500, 6500, by = 1000)\n  )\n\n# Trasformazioni\nggplot(diamonds, aes(carat, price)) +\n  geom_point(alpha = 0.1) +\n  scale_x_log10() +\n  scale_y_log10()\n\n# Espansione\nggplot(penguins, aes(species, body_mass_g)) +\n  geom_boxplot() +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.1)))\n```\n:::\n\n\n#### Scale per Colore\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Scale continue\nggplot(penguins, aes(flipper_length_mm, body_mass_g, \n                     color = bill_length_mm)) +\n  geom_point(size = 3) +\n  scale_color_viridis_c()\n\n# Scale discrete - manual\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(size = 3) +\n  scale_color_manual(\n    values = c(\"Adelie\" = \"#FF6B35\",\n               \"Chinstrap\" = \"#004E89\", \n               \"Gentoo\" = \"#8AC926\")\n  )\n\n# ColorBrewer\nggplot(penguins, aes(species, fill = species)) +\n  geom_bar() +\n  scale_fill_brewer(palette = \"Set2\")\n\n# Viridis (colorblind-friendly)\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(size = 3) +\n  scale_color_viridis_d()\n```\n:::\n\n\n#### Scale per Dimensione e Forma\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Dimensione\nggplot(penguins, aes(flipper_length_mm, body_mass_g, \n                     size = bill_length_mm)) +\n  geom_point(alpha = 0.6) +\n  scale_size_continuous(range = c(0.5, 8))\n\n# Forma\nggplot(penguins, aes(flipper_length_mm, body_mass_g, \n                     shape = species)) +\n  geom_point(size = 3) +\n  scale_shape_manual(values = c(16, 17, 18))\n```\n:::\n\n\n### 10:45 - 11:15: ☕ Pausa\n\n### 11:15 - 12:30: Themes e Personalizzazione {#themes}\n\n#### Themes Built-in\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(size = 3)\n\n# Themes predefiniti\np + theme_gray()      # default\np + theme_bw()\np + theme_minimal()\np + theme_classic()\np + theme_dark()\np + theme_void()\n```\n:::\n\n\n#### Personalizzazione Themes\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Modificare elementi del theme\nggplot(penguins, aes(species, body_mass_g, fill = species)) +\n  geom_boxplot() +\n  labs(\n    title = \"Massa Corporea dei Pinguini\",\n    subtitle = \"Per specie\",\n    x = \"Specie\",\n    y = \"Massa Corporea (g)\"\n  ) +\n  theme_minimal() +\n  theme(\n    # Testo\n    plot.title = element_text(size = 20, face = \"bold\"),\n    plot.subtitle = element_text(size = 14, color = \"gray40\"),\n    axis.title = element_text(size = 12, face = \"bold\"),\n    axis.text = element_text(size = 10),\n    \n    # Leggenda\n    legend.position = \"bottom\",\n    legend.title = element_text(face = \"bold\"),\n    \n    # Panel\n    panel.grid.major = element_line(color = \"gray90\"),\n    panel.grid.minor = element_blank(),\n    \n    # Background\n    plot.background = element_rect(fill = \"white\"),\n    panel.background = element_rect(fill = \"gray98\")\n  )\n```\n:::\n\n\n#### Theme Personalizzato Riutilizzabile\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creare un theme personalizzato\ntheme_custom <- function() {\n  theme_minimal() +\n    theme(\n      text = element_text(family = \"sans\"),\n      plot.title = element_text(size = 18, face = \"bold\", hjust = 0.5),\n      plot.subtitle = element_text(size = 12, hjust = 0.5),\n      axis.title = element_text(size = 12, face = \"bold\"),\n      legend.position = \"bottom\",\n      panel.grid.minor = element_blank(),\n      panel.background = element_rect(fill = \"gray98\", color = NA)\n    )\n}\n\n# Usare il theme\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(size = 3) +\n  labs(title = \"Pinguini dell'Antartide\") +\n  theme_custom()\n```\n:::\n\n\n#### Pacchetto ggthemes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggthemes)\n\np + theme_economist()\np + theme_fivethirtyeight()\np + theme_wsj()\np + theme_tufte()\n```\n:::\n\n\n### 12:30 - 13:30: 🍕 Pausa Pranzo\n\n### 13:30 - 15:00: Visualizzazioni Avanzate {#advanced}\n\n#### Smoothing e Modelli\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# geom_smooth() - default loess\nggplot(penguins, aes(flipper_length_mm, body_mass_g)) +\n  geom_point(alpha = 0.5) +\n  geom_smooth()\n\n# Linear model\nggplot(penguins, aes(flipper_length_mm, body_mass_g)) +\n  geom_point(alpha = 0.5) +\n  geom_smooth(method = \"lm\", se = TRUE)\n\n# Per gruppi\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(alpha = 0.5) +\n  geom_smooth(method = \"lm\", se = FALSE)\n```\n:::\n\n\n#### Density Plots\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1D density\nggplot(penguins, aes(body_mass_g, fill = species)) +\n  geom_density(alpha = 0.6)\n\n# 2D density contours\nggplot(penguins, aes(flipper_length_mm, body_mass_g)) +\n  geom_point(alpha = 0.3) +\n  geom_density_2d()\n\n# 2D density filled\nggplot(penguins, aes(flipper_length_mm, body_mass_g)) +\n  stat_density_2d(aes(fill = after_stat(level)), geom = \"polygon\") +\n  scale_fill_viridis_c()\n```\n:::\n\n\n#### Violin Plots e Beeswarm\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Violin plot\nggplot(penguins, aes(species, body_mass_g, fill = species)) +\n  geom_violin() +\n  theme(legend.position = \"none\")\n\n# Combinazione: violin + boxplot + points\nggplot(penguins, aes(species, body_mass_g, fill = species)) +\n  geom_violin(alpha = 0.5) +\n  geom_boxplot(width = 0.2, alpha = 0.7) +\n  geom_jitter(width = 0.1, alpha = 0.3, size = 1) +\n  theme_minimal() +\n  theme(legend.position = \"none\")\n```\n:::\n\n\n#### Heatmaps\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyr)\nlibrary(dplyr)\n\n# Preparare dati\npenguins_summary <- penguins %>%\n  filter(!is.na(sex)) %>%\n  group_by(species, island) %>%\n  summarise(mean_mass = mean(body_mass_g, na.rm = TRUE), .groups = \"drop\")\n\n# Heatmap\nggplot(penguins_summary, aes(island, species, fill = mean_mass)) +\n  geom_tile() +\n  geom_text(aes(label = round(mean_mass)), color = \"white\", size = 5) +\n  scale_fill_viridis_c() +\n  theme_minimal() +\n  labs(title = \"Massa Media per Specie e Isola\", fill = \"Massa (g)\")\n```\n:::\n\n\n#### Text e Labels\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggrepel)\n\n# Etichette con ggrepel (evita sovrapposizioni)\npenguins_labeled <- penguins %>%\n  group_by(species) %>%\n  slice_max(body_mass_g, n = 1)\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g)) +\n  geom_point(aes(color = species), alpha = 0.6) +\n  geom_label_repel(\n    data = penguins_labeled,\n    aes(label = paste(species, body_mass_g, \"g\")),\n    size = 3,\n    box.padding = 1\n  )\n```\n:::\n\n\n#### Combinare Grafici con patchwork\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(patchwork)\n\n# Creare grafici individuali\np1 <- ggplot(penguins, aes(species, fill = species)) +\n  geom_bar() +\n  theme_minimal() +\n  theme(legend.position = \"none\")\n\np2 <- ggplot(penguins, aes(species, body_mass_g, fill = species)) +\n  geom_boxplot() +\n  theme_minimal() +\n  theme(legend.position = \"none\")\n\np3 <- ggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point() +\n  theme_minimal()\n\n# Combinare\n(p1 | p2) / p3 + \n  plot_annotation(\n    title = \"Analisi Multi-pannello dei Pinguini\",\n    tag_levels = \"A\"\n  )\n```\n:::\n\n\n### 15:00 - 15:30: ☕ Pausa\n\n### 15:30 - 16:30: Progetto Finale {#project}\n\n**Traccia del progetto:**\n\nUtilizzare il dataset `diamonds` o un dataset a scelta per creare una presentazione visiva che includa:\n\n1. **Overview**: Grafici esplorativi dei dati\n2. **Relazioni**: Analisi delle relazioni tra variabili\n3. **Comparazioni**: Confronti tra gruppi\n4. **Conclusioni**: Visualizzazioni riassuntive\n\n**Requisiti:**\n\n- Almeno 4 grafici diversi\n- Uso appropriato di colori e themes\n- Titoli e labels informativi\n- Almeno un grafico con facets\n- Almeno un grafico combinato (patchwork)\n\n**Esempio struttura:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(patchwork)\n\n# 1. Overview\noverview <- ggplot(diamonds, aes(carat)) +\n  geom_histogram(bins = 50, fill = \"steelblue\") +\n  labs(title = \"Distribuzione Carati\")\n\n# 2. Relazione prezzo-carati\nrelationship <- ggplot(diamonds, aes(carat, price)) +\n  geom_point(alpha = 0.1) +\n  geom_smooth(method = \"lm\") +\n  scale_y_log10() +\n  labs(title = \"Prezzo vs Carati\")\n\n# 3. Comparazione per taglio\ncomparison <- ggplot(diamonds, aes(cut, price, fill = cut)) +\n  geom_boxplot() +\n  theme_minimal() +\n  theme(legend.position = \"none\") +\n  labs(title = \"Prezzo per Qualità del Taglio\")\n\n# 4. Analisi multi-dimensionale\nmultidim <- ggplot(diamonds, aes(carat, price, color = clarity)) +\n  geom_point(alpha = 0.3) +\n  facet_wrap(~cut) +\n  scale_y_log10() +\n  scale_color_viridis_d() +\n  labs(title = \"Analisi Multi-dimensionale\")\n\n# Combinare tutto\n(overview | relationship) / (comparison | multidim) +\n  plot_annotation(\n    title = \"Analisi Completa Dataset Diamonds\",\n    subtitle = \"Progetto Finale - Data Visualization con ggplot2\",\n    theme = theme(plot.title = element_text(size = 20, face = \"bold\"))\n  )\n```\n:::\n\n\n### 16:30 - 17:00: Considerazioni Finali e Q&A {#wrap-up}\n\n**Best Practices Recap:**\n\n1. ✅ Iniziare sempre con una domanda chiara\n2. ✅ Scegliere il tipo di grafico appropriato\n3. ✅ Usare colori con significato e accessibili\n4. ✅ Includere titoli, labels e caption informativi\n5. ✅ Mantenere i grafici semplici e leggibili\n6. ✅ Documentare il codice\n7. ✅ Salvare i grafici in alta risoluzione\n\n**Salvare i grafici:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ggsave() - metodo consigliato\nggsave(\n  filename = \"my_plot.png\",\n  plot = last_plot(),\n  width = 10,\n  height = 6,\n  dpi = 300,\n  bg = \"white\"\n)\n\n# Diversi formati\nggsave(\"my_plot.pdf\", width = 10, height = 6)\nggsave(\"my_plot.svg\", width = 10, height = 6)\n```\n:::\n\n\n## Risorse per Continuare\n\n### Prossimi Passi\n\n1. Esplorare [ggplot2 extensions](https://exts.ggplot2.tidyverse.org/gallery/)\n2. Partecipare a [#TidyTuesday](https://github.com/rfordatascience/tidytuesday)\n3. Leggere [Fundamentals of Data Visualization](https://clauswilke.com/dataviz/)\n4. Praticare, praticare, praticare!\n\n### Pacchetti da Esplorare\n\n- `gganimate` - Animazioni\n- `plotly` - Grafici interattivi\n- `ggraph` - Network graphs\n- `ggridges` - Ridge plots\n- `gghighlight` - Evidenziare dati\n\n## Feedback\n\nPer favore, compila il [questionario di feedback](https://forms.gle/xxx) (da aggiungere)!\n\n---\n\n**Grazie per aver partecipato! 🎉**\n\nContinua a visualizzare dati e a creare bellissimi grafici con ggplot2!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}